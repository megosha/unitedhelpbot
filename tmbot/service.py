from datetime import datetime
import logging
# from pathlib import Path
from threading import Thread

import telebot
from django.conf import settings

from tmbot import models
from tmbot import constants
from tmbot import helpers

from time import sleep


BASE_DIR = settings.BASE_DIR
logfile = str(BASE_DIR / 'logs' / 'main.log')
logging.basicConfig(filename=logfile, filemode='a')


def init_bot(bot):
    def get_name(message, account, error=False):
        if error:
            msg = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –í–∞—à–µ –∏–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–∏–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã)"
        else:
            msg = "üì® –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç? üôÇ\n(–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) üëáüëáüëá"
        first_dialog = bot.send_message(message.chat.id, msg)
        bot.register_next_step_handler(first_dialog, create_user)


    def create_user(message, account):
        if message.content_type == 'text':
            name = message.text.strip()
            if helpers.name_is_valid(name):
                account.tm_id = message.from_user.id
                account.user.first_name = message.text.strip()
                account.save()
                bot.send_message(message.chat.id, f"‚ùì {name}, –ø–æ—Å–µ—â–∞–µ—Ç–µ –ª–∏ –í—ã —Ü–µ—Ä–∫–æ–≤—å?",
                                 reply_markup=helpers.render_keyboard(constants.STATUS))
            # users = models.RDB()
            # chat_id = message.chat.id
            # tm_id = message.from_user.id

            # m_id = message.id
            # if helpers.name_is_valid(name):
            #     body = users.init_item(chat_id, tm_id, name, m_id)
            #     users.set_item(chat_id, body)
            #     bot.send_message(message.chat.id, f"‚ùì {name}, –ø–æ—Å–µ—â–∞–µ—Ç–µ –ª–∏ –í—ã —Ü–µ—Ä–∫–æ–≤—å?",
            #                      reply_markup=helpers.render_keyboard(constants.STATUS))
            else:
                get_name(message, account=account, error=True)
        else:
            send_welcome(message)


    def forward_trouble(users, message, action=None, admin=False):
        reserved_contact = users.get_item_value(message.chat.id, "contact")
        if admin:
            chat_id = message.chat.id
            msg = (f'‚ùå –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ï –ü–û–õ–£–ß–ò–õ –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ!\n'
                   f'–ó–∞—è–≤–∫–∞ ‚Ññ: {chat_id}_{users.get_item_value(chat_id, "last_message_id")}"\n'
                   f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.chat.username}\n'
                   f'–ò–º—è: {users.get_item_value(chat_id, "name")}\n'
                   f'–°—Ç–∞—Ç—É—Å (–≤–µ—Ä—É—é—â–∏–π/–Ω–µ–≤–µ—Ä—É—é—â–∏–π): {constants.STATUS.get(users.get_item_value(chat_id, "status"))}\n'
                   f'–î–æ–ø. –∫–æ–Ω—Ç–∞–∫—Ç: {reserved_contact}\n'
                   f'–¢–µ–º–∞: {users.get_item_value(chat_id, "action_type")}\n'
                   f'–î–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: {users.get_item_value(chat_id, "last_message_date")}\n'
                   f'–°–æ–æ–±—â–µ–Ω–∏–µ: {users.get_item_value(chat_id, "last_message")}')
        else:
            msg = (f'–ó–∞—è–≤–∫–∞ ‚Ññ: "{message.chat.id}_{message.id}"\n '
           f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n'
           f'–ò–º—è: {users.get_item_value(message.chat.id, "name")}\n'
           f'–°—Ç–∞—Ç—É—Å (–≤–µ—Ä—É—é—â–∏–π/–Ω–µ–≤–µ—Ä—É—é—â–∏–π): {constants.STATUS.get(users.get_item_value(message.chat.id, "status"))}\n'
           f'–î–æ–ø. –∫–æ–Ω—Ç–∞–∫—Ç: {reserved_contact}\n'
           f'–¢–µ–º–∞: {settings.ACTIONS[action] if action is not None else ""}\n'
           f'–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}')

        if not reserved_contact:
            k_wargs = {"reply_markup": helpers.render_keyboard(
                {f'private_{message.chat.id}': "–°–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã (‚ö†Ô∏è–ù–∞–∂–∏–º–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)"}
            )}
        else:
            k_wargs = {}

        return msg, k_wargs


    def get_trouble(message, action):
        users = models.RDB()

        manager_chat = models.get_env_value(action)

        msg, k_wargs = forward_trouble(users, message, action)

        msg_log = msg.replace("\n", " - ")
        logging.warning(f'{datetime.now} - in get_trouble - MANAGER - {manager_chat} DATA - {msg_log}')

        bot.reply_to(message,
                     f'{users.get_item_value(message.chat.id, "name")}, –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. '
                     f'–ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è! üï∞ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üå∑',
                     reply_markup=helpers.returntomainmenu_keyboard())

        users.change_item(message.chat.id, "request", "1")
        users.change_item(message.chat.id, "last_message_id", f"{message.id}")
        users.change_item(message.chat.id, "last_message", message.text)
        users.change_item(message.chat.id, "last_message_date", f"{datetime.now()}")
        users.change_item(message.chat.id, "action_type", f"{settings.ACTIONS[action]}")
        logging.warning(f'{datetime.now} - USER DATA AFTER GET TROUBLE - {users.get_object(message.chat.id)}')

        try:
            bot.send_message(manager_chat, msg, **k_wargs)
            bot.forward_message(manager_chat, message.chat.id, message_id=message.id)
        except telebot.apihelper.ApiTelegramException:
            msg = '‚ö†Ô∏è –î–û–°–¢–£–ü –ë–û–¢–ê –ö –ú–ï–ù–ï–î–ñ–ï–†–£ –û–ì–†–ê–ù–ò–ß–ï–ù! –°–õ–ï–î–£–Æ–©–ï–ï –û–ë–†–ê–©–ï–ù–ò–ï –ù–ï –î–û–°–¢–ê–í–õ–ï–ù–û ‚¨áÔ∏è\n\n' + msg
            bot.send_message(models.get_env_value('superadmin'), msg, **k_wargs)
            bot.forward_message(models.get_env_value('superadmin'), message.chat.id, message_id=message.id)
            bot.send_message(models.get_env_value('admin'), msg, **k_wargs)
            bot.forward_message(models.get_env_value('admin'), message.chat.id, message_id=message.id)


    @bot.callback_query_handler(func=lambda call: True)
    def query_handler(call):
        if str(call.message.chat.id).startswith('-'):
            return None
        logging.warning(f'{datetime.now} - in query_handler/ Clicked Button - {call.data}')
        try:
            bot.answer_callback_query(callback_query_id=call.id)
            if call.data == 'contact':
                chat_id = call.message.chat.id
                answer = constants.CONTACTS
                bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.id, reply_markup=None)
                bot.send_message(call.message.chat.id, answer,
                                 reply_markup=helpers.returntomainmenu_keyboard(show_website=True), parse_mode="HTML")
            elif call.data in settings.ACTIONS.keys():
                chat_id = call.message.chat.id
                answer = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º—É:"{settings.ACTIONS[call.data]}"\n\nüì® –û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ –û–î–ù–ò–ú —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º üëáüëáüëá'
                sent = bot.send_message(chat_id, answer)
                bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.id,
                                              reply_markup=helpers.returntomainmenu_keyboard())
                bot.clear_step_handler(call.message)
                bot.register_next_step_handler(sent, get_trouble, action=call.data)
            elif call.data == 'menu':
                chat_id = call.message.chat.id
                bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.id, reply_markup=None)
                bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –í–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è',
                                 reply_markup=helpers.render_keyboard(settings.ACTIONS, True))
            elif call.data in constants.STATUS.keys():
                chat_id = call.message.chat.id
                users = models.RDB()
                users.change_item(chat_id, "status", str(call.data))

                bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.id, reply_markup=None)
                bot.send_message(chat_id,
                                 f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {users.get_item_value(chat_id, "name")}! üòâ'
                                 f'–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É–¥–µ–ª–∏–ª–∏ –≤—Ä–µ–º—è –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏—Å—å üôè\n\n'
                                 f'‚ùì–ù–∞ –∫–∞–∫—É—é —Ç–µ–º—É –í–∞—à –≤–æ–ø—Ä–æ—Å? üëá\n(–í—Å–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è –í–∞—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã üî•)',
                                 reply_markup=helpers.render_keyboard(settings.ACTIONS, True))

            elif call.data == 'ignored':
                message = call.message
                chat_id = message.chat.id

                users = models.RDB()
                users.change_item(chat_id, "request", "3")

                msg, k_wargs = forward_trouble(users, message, admin=True)

                bot.send_message(models.get_env_value('admin'), msg, **k_wargs)
                bot.forward_message(models.get_env_value("admin"), chat_id,
                                    message_id=users.get_item_value(chat_id, "last_message_id"))

                bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.id, reply_markup=None)
                answer = '–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ. –ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ –∑–∞–¥–µ—Ä–∂–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ üòîüå∑'
                bot.send_message(chat_id, answer, reply_markup=helpers.returntomainmenu_keyboard(show_website=True))
                logging.warning(f'{datetime.now} - Ignored Button - processed')

            elif call.data == 'answered':
                chat_id = call.message.chat.id
                users = models.RDB()
                users.change_item(chat_id, "request", "2")
                bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.id, reply_markup=None)
                answer = ('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∫ –Ω–∞–º –≤ –í–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏! üôè'
                          '–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –í–∞–º –ø–æ–º–æ—á—å! üíí\n\n'
                          '–ü—É—Å—Ç—å –ì–æ—Å–ø–æ–¥—å –±–ª–∞–≥–æ—Å–ª–æ–≤–∏—Ç –í–∞—Å!')
                bot.send_message(chat_id, answer, reply_markup=helpers.returntomainmenu_keyboard(show_website=True))
                logging.warning(f'{datetime.now} - Answered Button - processed')
            elif call.data.startswith('private_'):
                btn_id = call.data
                manager_chat = call.message.chat.id
                chat_id = btn_id[btn_id.rfind('_') + 1:]
                get_contact = bot.send_message(
                    chat_id,
                    f'‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ telegram –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. \n\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –æ—Ç–≤–µ—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º '
                    f'–≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ email –¥–ª—è —Å–≤—è–∑–∏. üëáüëáüëá',
                )
                bot.register_next_step_handler(get_contact, additional_contact, manager_chat=manager_chat)
                bot.edit_message_reply_markup(chat_id=manager_chat, message_id=call.message.id, reply_markup=None)
            else:
                pass
        except Exception as err:
            logging.error(f'{datetime.now()} - {helpers._get_detail_exception_info(err)}')


    def additional_contact(message, manager_chat):
        bot.forward_message(manager_chat, message.chat.id, message_id=message.id)
        contact = message.text
        users = models.RDB()
        users.change_item(message.chat.id, "contact", contact)
        bot.reply_to(message,
                     f'–°–ø–∞—Å–∏–±–æ, {users.get_item_value(message.chat.id, "name")}! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –ø–µ—Ä–µ–¥–∞–Ω, —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è üì≤',
                     reply_markup=helpers.returntomainmenu_keyboard())


    @bot.message_handler(commands=['start', 'help'])
    def send_welcome(message):
        if str(message.chat.id).startswith('-'):
            return None
        logging.warning(f'{datetime.now} - clicked start Button')

        if message.from_user.is_bot:
            return

        local_bot = models.Settings.objects.filter(bot_token=bot.token).first()
        if not local_bot:
            return

        bot.reply_to(message, local_bot.greeting)
        if local_bot.greeting_cover:
            img = open(f'{local_bot.greeting_cover.path}', 'rb')
            bot.send_photo(message.chat.id, img)

        account, created = models.Account.objects.get_or_create(chat_id=message.chat.id)
        if created:
            get_name(message, account=account)
        else:
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –í–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è',
                             reply_markup=helpers.render_keyboard(settings.ACTIONS, True))

    def feedback_checker():
        sleep_time = 1000
        logging.warning(f'{datetime.now()} - start feedback_checker')
        users = models.RDB()
        while True:
            logging.warning(f'{datetime.now()} - start feedback_checker cycle')
            for chat_id in models.db.scan_iter('user:*'):
                if str(chat_id).startswith('-'):
                    return None
                # obj = users.get_object(chat_id)
                request_status = users.get_item_value(chat_id, 'request')
                last_message_date = users.get_item_value(chat_id, 'last_message_date')
                name = users.get_item_value(chat_id, 'name')

                if request_status == '1' and last_message_date:
                    dt_format = '%Y-%m-%d %H:%M:%S.%f'
                    dt = datetime.strptime(last_message_date, dt_format)
                    if abs(datetime.now() - dt).days >= 1:
                        # if abs(datetime.now() - dt).days < 1:
                        try:
                            bot.send_message(chat_id.decode(), f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! '
                                                               f'–ù–µ–¥–∞–≤–Ω–æ –í—ã –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n\n'
                                                               f'–° –í–∞–º–∏ —Å–≤—è–∑–∞–ª–∏—Å—å –ø–æ –í–∞—à–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é? (–≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ üëá)',
                                             reply_markup=helpers.render_keyboard(constants.FEEDBACK))
                        except telebot.apihelper.ApiTelegramException:
                            pass
                        users.change_item(chat_id.decode(), "request", "4")
                        logging.warning(
                            f'{datetime.now()} - asking for feedback - USER_ID {users.get_item_value(chat_id, "tm_id")} - '
                            f'CHAT_ID - {chat_id.decode()}')
            logging.warning(
                f'{datetime.now()} - sleep for {sleep_time} seconds')
            sleep(sleep_time)

    logging.warning(f'{datetime.now()} - starting THREAD')
    Thread(target=feedback_checker).start()
    logging.warning(f'{datetime.now()} - starting BOT')
    bot.polling()
