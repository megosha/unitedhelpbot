from datetime import datetime, timedelta
import logging
# from pathlib import Path
from threading import Thread

import telebot
from django.conf import settings

from tmbot import models
from tmbot import constants
from tmbot import helpers

from time import sleep


def validated_bot(bot):
    return isinstance(bot, models.Settings)

def init_bot(bot, city_name):
    logfile = str(settings.BASE_DIR / 'logs' / f'main_{city_name}.log')
    logging.basicConfig(filename=logfile, filemode='a')

    current_bot = models.Settings.objects.filter(bot_token=bot.token).first()

    def get_name(message, error=False):
        if error:
            msg = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –í–∞—à–µ –∏–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–∏–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã)"
        else:
            msg = "üì® –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç? üôÇ\n(–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ) üëáüëáüëá"
        first_dialog = bot.send_message(message.chat.id, msg)
        bot.register_next_step_handler(first_dialog, create_user)


    def create_user(message):
        if message.content_type == 'text':
            name = message.text.strip()
            if helpers.name_is_valid(name):
                account = models.Account.objects.create(name=name, tm_id=message.from_user.id, chat_id=message.chat.id)
                if message.from_user.username:
                    account.username = message.from_user.username
                    account.save()
                bot.send_message(message.chat.id, f"‚ùì {name}, –ø–æ—Å–µ—â–∞–µ—Ç–µ –ª–∏ –í—ã —Ü–µ—Ä–∫–æ–≤—å?",
                                 reply_markup=helpers.render_keyboard(constants.STATUS))
            else:
                get_name(message, error=True)
        else:
            send_welcome(message)


    def forward_trouble(account: models.Account, message, action, admin=False):
        chat_id = message.chat.id
        last_message = account.message_set.filter(subcategory=action).last()
        if admin:
            msg = (f'‚ùå –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ï –ü–û–õ–£–ß–ò–õ –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ!\n'
                   f'–ó–∞—è–≤–∫–∞ ‚Ññ: {last_message.pk}"\n'
                   f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.chat.username}\n'
                   f'–ò–º—è: {account.name}\n'
                   f'–°—Ç–∞—Ç—É—Å (–≤–µ—Ä—É—é—â–∏–π/–Ω–µ–≤–µ—Ä—É—é—â–∏–π): {account.get_faith_status_display()}\n'
                   f'–î–æ–ø. –∫–æ–Ω—Ç–∞–∫—Ç: {account.contact}\n'
                   f'–¢–µ–º–∞: {action.interface_name }\n'
                   f'–î–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è: {last_message.date_create}\n'
                   f'–°–æ–æ–±—â–µ–Ω–∏–µ: {last_message.last_message}')
        else:
            msg = (f'–ó–∞—è–≤–∫–∞ ‚Ññ: "{last_message.pk}"\n'
           f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.chat.username}\n'
           f'–ò–º—è: {account.name}\n'
           f'–°—Ç–∞—Ç—É—Å (–≤–µ—Ä—É—é—â–∏–π/–Ω–µ–≤–µ—Ä—É—é—â–∏–π): {account.get_faith_status_display()}\n'
           f'–î–æ–ø. –∫–æ–Ω—Ç–∞–∫—Ç: {account.contact}\n'
           f'–¢–µ–º–∞: {action.interface_name }\n'
           f'–°–æ–æ–±—â–µ–Ω–∏–µ: {last_message.last_message}')

        if not account.contact:
            k_wargs = {"reply_markup": helpers.render_keyboard(
                {f'private_{chat_id}': "–°–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã (‚ö†Ô∏è–ù–∞–∂–∏–º–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)"}
            )}
        else:
            k_wargs = {}

        return msg, k_wargs


    def get_trouble(message, action):
        chat_id = message.chat.id
        account = models.Account.objects.filter(chat_id=chat_id).first()
        manager_chat = action.manager
        params = {'account':account,
                  "last_msg_id":message.id,
                  "last_message":message.text,
                  "request_status":1,
                  'subcategory':action}
        last_message = models.Message.objects.create(**params)

        msg, k_wargs = forward_trouble(account, message, action)

        msg_log = msg.replace("\n", " - ")
        logging.warning(f'{datetime.now} - in get_trouble - MANAGER - {manager_chat} DATA - {msg_log}')

        bot.reply_to(message,
                     f'{account.name}, –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. '
                     f'–ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è! üï∞ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üå∑',
                     reply_markup=helpers.returntomainmenu_keyboard())


        last_message.request_status = 2
        last_message.save()
        logging.warning(f'{datetime.now} - USER DATA AFTER GET TROUBLE - {account.chat_id}')

        try:
            bot.send_message(manager_chat.tm_id, msg, **k_wargs)
            bot.forward_message(manager_chat.tm_id, chat_id, message_id=message.id)
        except telebot.apihelper.ApiTelegramException:
            msg = '‚ö†Ô∏è –î–û–°–¢–£–ü –ë–û–¢–ê –ö –ú–ï–ù–ï–î–ñ–ï–†–£ –û–ì–†–ê–ù–ò–ß–ï–ù! –°–õ–ï–î–£–Æ–©–ï–ï –û–ë–†–ê–©–ï–ù–ò–ï –ù–ï –î–û–°–¢–ê–í–õ–ï–ù–û ‚¨áÔ∏è\n\n' + msg
            superadmin = models.UppperSettings.objects.filter().first()
            bot.send_message(superadmin.superadmin.tm_id, msg, **k_wargs)
            bot.forward_message(superadmin.superadmin.tm_id, chat_id, message_id=message.id)
            bot.send_message(current_bot.pastor.tm_id, msg, **k_wargs)
            bot.forward_message(current_bot.pastor.tm_id, chat_id, message_id=message.id)

    def consult_processing(call, answer, action):
        sent = bot.send_message(call.message.chat.id, answer,
                                reply_markup=helpers.returntomainmenu_keyboard(current_bot=current_bot))
        # bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.id,
        #                               reply_markup=helpers.returntomainmenu_keyboard())
        # bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.id)
        bot.clear_step_handler(call.message)
        bot.register_next_step_handler(sent, get_trouble, action=action)

    def subcategory_proceed(call, data):
        answer = f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—É–Ω–∫—Ç: "{current_bot.subcategories()[data]}"\n\n' \
                 f'üì® –û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é –≤ –æ—Ç–≤–µ—Ç–µ –û–î–ù–ò–ú —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º üëáüëáüëá'
        action = models.SubCategories.objects.filter(button_name=data, parent_category__city=current_bot).first()
        consult_processing(call, answer, action)



    @bot.callback_query_handler(func=lambda call: True)
    def query_handler(call):
        if str(call.message.chat.id).startswith('-'):
            return None
        logging.warning(f'{datetime.now} - in query_handler/ Clicked Button - {call.data}')
        try:
            chat_id = call.message.chat.id
            bot.answer_callback_query(callback_query_id=call.id)
            if current_bot:
                if call.data == 'contact':
                    # –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
                    answer = current_bot.contacts
                    bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.id, reply_markup=None)
                    bot.delete_message(chat_id=chat_id, message_id=call.message.id)
                    bot.send_message(call.message.chat.id, answer,
                                         reply_markup=helpers.returntomainmenu_keyboard(
                                             show_website=True, current_bot=current_bot), parse_mode="HTML")
                elif call.data in current_bot.menu_as_dict().keys():
                    # –Ω–∞–∂–∞–ª–∏ –Ω–∞ –ø—É–Ω–∫—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                    bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.id, reply_markup=None)
                    bot.delete_message(chat_id=chat_id, message_id=call.message.id)
                    subcategories = list(current_bot.mainmenu_set.filter(
                        button_name=call.data).order_by('subcategories__order').values_list(
                        'subcategories__button_name', 'subcategories__interface_name'))
                    if len(subcategories) == 1:
                        # –µ—Å–ª–∏ –≤ –ø—É–Ω–∫—Ç–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –æ–¥–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è - —Å—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        subcategory_proceed(call, subcategories[0][0])
                    else:
                        # –∏–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
                        subcategories = {button: interface for button, interface in subcategories}
                        subcategories['backtomenu'] = '–ù–∞–∑–∞–¥'
                        bot.send_message(chat_id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
                                         reply_markup=helpers.render_keyboard(subcategories))

                elif call.data in current_bot.subcategories(kind='consult').keys():
                    # –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –º–µ–Ω—é
                    subcategory_proceed(call, call.data)
                elif call.data in constants.STATUS.keys():
                    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –≤–µ—Ä–µ
                    account = models.Account.objects.filter(chat_id=chat_id).first()
                    if not account:
                        return
                    account.faith_status = call.data
                    account.save()

                    bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.id, reply_markup=None)
                    bot.delete_message(chat_id=chat_id, message_id=call.message.id)
                    bot.send_message(chat_id,
                                     f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {account.name}! üòâ'
                                     f'–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É–¥–µ–ª–∏–ª–∏ –≤—Ä–µ–º—è –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏—Å—å üôè\n\n'
                                     f'‚ùì–ù–∞ –∫–∞–∫—É—é —Ç–µ–º—É –í–∞—à –≤–æ–ø—Ä–æ—Å? üëá\n(–í—Å–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è –í–∞—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã üî•)',
                                     reply_markup=helpers.render_keyboard(current_bot.menu_as_dict(), True))

                elif call.data.startswith('ignored_'):
                    # –µ—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ —Å–≤—è–∑–∞–ª—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ –≤–æ–ø—Ä–æ—Å—É (–Ω–∞–∂–∏–º–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
                    message_pk = helpers.get_id(call.data)

                    message_obj = models.Message.objects.filter(pk=message_pk).first()
                    message_obj.request_status = 4
                    message_obj.save()

                    msg, k_wargs = forward_trouble(message_obj.account, call.message, message_obj.subcategory, admin=True)

                    bot.send_message(models.UppperSettings.objects.filter().first().superadmin.chat_id, msg, **k_wargs)
                    try:
                        bot.send_message(current_bot.pastor.chat_id, msg, **k_wargs)
                        bot.forward_message(current_bot.pastor.chat_id, chat_id,
                                        message_id=message_obj.last_msg_id)
                    except Exception as error:
                        bot.send_message(models.UppperSettings.objects.filter().first().superadmin.chat_id,
                                         f'–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Å—Ç–æ—Ä—É: {error}',
                                         **k_wargs)

                    bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.id, reply_markup=None)
                    bot.delete_message(chat_id=chat_id, message_id=call.message.id)
                    answer = '–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ. –ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ –∑–∞–¥–µ—Ä–∂–∫—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ üòîüå∑'
                    bot.send_message(chat_id, answer, reply_markup=helpers.returntomainmenu_keyboard(show_website=True,
                                                                                                     current_bot=current_bot))
                    logging.warning(f'{datetime.now} - Ignored Button - processed')

                elif call.data.startswith('answered_'):
                    # –µ—Å–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∑–∞–ª—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ –≤–æ–ø—Ä–æ—Å—É (–Ω–∞–∂–∏–º–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
                    message_pk = helpers.get_id(call.data)

                    message_obj = models.Message.objects.filter(pk=message_pk).first()
                    message_obj.request_status = 3
                    message_obj.save()

                    bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.id, reply_markup=None)
                    bot.delete_message(chat_id=chat_id, message_id=call.message.id)
                    answer = ('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∫ –Ω–∞–º –≤ –í–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏! üôè'
                              '–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –í–∞–º –ø–æ–º–æ—á—å! üíí\n\n'
                              '–ü—É—Å—Ç—å –ì–æ—Å–ø–æ–¥—å –±–ª–∞–≥–æ—Å–ª–æ–≤–∏—Ç –í–∞—Å!')
                    bot.send_message(chat_id, answer, reply_markup=helpers.returntomainmenu_keyboard(show_website=True,
                                                                                                     current_bot=current_bot))
                    logging.warning(f'{datetime.now} - Answered Button - processed')
                elif call.data.startswith('private_'):
                    # –µ—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏ –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –º–æ–∂–µ—Ç —Å –Ω–∏–º —Å–≤—è–∑–∞—Ç—å—Å—è - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø –∫–æ–Ω—Ç–∞–∫—Ç, –Ω–∞–∂–∏–º–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä
                    btn_id = call.data
                    manager_chat = call.message.chat.id
                    chat_id = helpers.get_id(btn_id)
                    get_contact = bot.send_message(
                        chat_id,
                        f'‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ telegram –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. \n\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –æ—Ç–≤–µ—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º '
                        f'–≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ email –¥–ª—è —Å–≤—è–∑–∏. üëáüëáüëá',
                    )
                    bot.register_next_step_handler(get_contact, additional_contact, manager_chat=manager_chat)
                    bot.edit_message_reply_markup(chat_id=manager_chat, message_id=call.message.id, reply_markup=None)
                    # –Ω–µ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
                else:
                    # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä—ã, –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏–ª–∏ –ø—Ä–∏—à–ª–∞ –Ω–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞
                    bot.clear_step_handler(call.message)
                    account = models.Account.objects.filter(chat_id=chat_id).first()
                    if not account.faith_status:
                        # –µ—Å–ª–∏ –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º –æ–±–æ—Ä–≤–∞–ª—Å—è –ø—Ä–æ—Ü–µ—Å—Å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
                        bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.id, reply_markup=None)
                        bot.delete_message(chat_id=chat_id, message_id=call.message.id)
                        bot.send_message(chat_id, f"‚ùì {account.name}, –ø–æ—Å–µ—â–∞–µ—Ç–µ –ª–∏ –í—ã —Ü–µ—Ä–∫–æ–≤—å?",
                                         reply_markup=helpers.render_keyboard(constants.STATUS))
                    else:
                        bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.id, reply_markup=None)
                        # –Ω–µ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
                        # (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ –≤ –æ—Ç–≤–µ—Ç –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–∞–∂–Ω–æ –µ–µ –≤–∏–¥–µ—Ç—å)
                        if call.data == 'backtomenu':
                            bot.delete_message(chat_id=chat_id, message_id=call.message.id)
                        menu = current_bot.menu_as_dict()
                        bot.send_message(chat_id, 'üî∏ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ üî∏',
                                         reply_markup=helpers.render_keyboard(menu, True))
                    if not account.cities.filter(city=current_bot.city).exists():
                        account.cities.add(current_bot)
            else:
                return
        except Exception as err:
            logging.error(f'{datetime.now()} - {helpers._get_detail_exception_info(err)}')


    def additional_contact(message, manager_chat):
        bot.forward_message(manager_chat, message.chat.id, message_id=message.id)
        contact = message.text

        models.Account.objects.filter(chat_id=message.chat.id).update(contact=contact)

        bot.reply_to(message,
                     f'–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –ø–µ—Ä–µ–¥–∞–Ω, —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è üì≤',
                     reply_markup=helpers.returntomainmenu_keyboard())


    @bot.message_handler(commands=['start', 'help'])
    def send_welcome(message):
        if str(message.chat.id).startswith('-'):
            return None
        logging.warning(f'{datetime.now} - clicked start Button')

        if message.from_user.is_bot:
            return

        if not validated_bot(current_bot):
            bot.send_message(message.chat.id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
            try:
                superadmin = models.UppperSettings.objects.filter().first()
                bot.send_message(superadmin.superadmin.chat_id, f"–ù–µ –Ω–∞–π–¥–µ–Ω –±–æ—Ç {current_bot} /start")
            except:
                pass
            return

        local_bot = models.Settings.objects.filter(bot_token=bot.token).first()
        if not local_bot:
            return

        bot.reply_to(message, local_bot.greeting)
        if local_bot.greeting_cover:
            img = open(f'{local_bot.greeting_cover.path}', 'rb')
            bot.send_photo(message.chat.id, img)

        account = models.Account.objects.filter(chat_id=message.chat.id)
        if not account.exists():
            get_name(message)
        else:
            acc = account.first()
            if not acc.cities.filter(city=current_bot.city).exists():
                acc.cities.add(current_bot)
            if not account.first().faith_status:
                bot.send_message(message.chat.id, f"‚ùì {acc.name}, –ø–æ—Å–µ—â–∞–µ—Ç–µ –ª–∏ –í—ã —Ü–µ—Ä–∫–æ–≤—å?",
                                 reply_markup=helpers.render_keyboard(constants.STATUS))
            else:
                menu = current_bot.menu_as_dict()
                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –í–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è',
                             reply_markup=helpers.render_keyboard(menu, True))

    def feedback_checker():
        sleep_time = 1000
        logging.warning(f'{datetime.now()} - start feedback_checker')


        params = {'subcategory__parent_category__city__city':current_bot.city,
                  'date_create__lte':datetime.now()-timedelta(days=1),
                  'request_status':2,
                  }

        while True:
            messages = models.Message.objects.filter(**params)
            logging.warning(f'{datetime.now()} - start feedback_checker cycle - found {messages.count()} messages')

            for message in messages:
                chat_id = message.account.chat_id
                name = message.account.name
                subcategory_title = message.subcategory.interface_name

                expect_answer = models.Message.objects.filter(subcategory__parent_category__city__city=current_bot.city,
                                                              account=message.account, request_status=5).exists()
                if not expect_answer:
                    FEEDBACK = {f"answered_{message.pk}": "‚úÖ  –î–∞, —Å–æ –º–Ω–æ–π —Å–≤—è–∑–∞–ª–∏—Å—å",
                                f"ignored_{message.pk}": "‚ùå  –ù–µ—Ç, —è –Ω–µ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç–∞"
                                }
                    try:
                        bot.send_message(chat_id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! '
                                                  f'–ù–µ–¥–∞–≤–Ω–æ –í—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –ø–æ —Ç–µ–º–µ ¬´{subcategory_title}¬ª.\n\n'
                                                  f'–° –í–∞–º–∏ —Å–≤—è–∑–∞–ª–∏—Å—å –ø–æ –í–∞—à–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é? (–≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ üëá)',
                                         reply_markup=helpers.render_keyboard(FEEDBACK))
                    except telebot.apihelper.ApiTelegramException:
                        logging.warning(f'{datetime.now()} - message sending error - {message.pk} pk')

                    message.request_status = 5
                    message.save()
                    logging.warning(
                        f'{datetime.now()} - asking for feedback - USER_ID {message.account.tm_id} - '
                        f'CHAT_ID - {chat_id}')
            logging.warning(
                f'{datetime.now()} - sleep for {sleep_time} seconds')
            sleep(sleep_time)

    # logging.warning(f'{datetime.now()} - starting THREAD')
    # Thread(target=feedback_checker).start()

    while True:
        logging.warning(f'{datetime.now()} - starting BOT')
        try:
            bot.polling(none_stop=True)
        except Exception as err:
            logging.warning(f'{datetime.now()} - {helpers._get_detail_exception_info(err)}')
            sleep(5)

    # bot.polling()
