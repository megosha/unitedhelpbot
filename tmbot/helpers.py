import os
import sys

import telebot
from tmbot.models import get_env_value




def greeting_message():
    return (f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ—â–Ω–∏–∫ —Ü–µ—Ä–∫–≤–∏ ¬´–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ¬ª –≥. –ë–∞—Ä–Ω–∞—É–ª ‚õ™\n\n'
            f'–ù–∞—à–∞ —Ü–µ—Ä–∫–æ–≤—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –≤ 2009 –≥–æ–¥—É.'
            f'\n–ú–∏—Å—Å–∏–æ–Ω–µ—Ä—ã –ê—Ä—Ç—ë–º –∏ –ê–Ω–∞—Å—Ç–∞—Å–∏—è –¢–æ—Ä–æ–ø—á–∏–Ω—ã, –ø—Ä–∏–µ—Ö–∞–≤ –≤ –ë–∞—Ä–Ω–∞—É–ª, —Å—Ç–∞–ª–∏ —Å–ª—É–∂–∏—Ç—å –ª—é–¥—è–º –ï–≤–∞–Ω–≥–µ–ª–∏–µ–º –∏ –¥–æ–±—Ä—ã–º–∏ –¥–µ–ª–∞–º–∏ ‚ô•Ô∏è\n\n'
            f'‚ÄºÔ∏è –ú—ã –ø–æ–º–æ–≥–∞–µ–º —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã:\n'
            f'1) —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ \n'
            f'2) —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ \n'
            f'3) —Å–µ–º–µ–π–Ω—ã–µ \n'
            f'4) –¥—É—à–µ–≤–Ω—ã–µ \n'
            f'5) –¥—É—Ö–æ–≤–Ω—ã–µ \n–ù–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å, —É–∂–µ –±–æ–ª–µ–µ 1000 —á–µ–ª–æ–≤–µ–∫ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞—à—É –ø–æ–º–æ—â—å ü§ùüôå\n\n'
            f'–ü–æ–º–æ—â—å –º—ã –æ–∫–∞–∑—ã–≤–∞–µ–º –ë–ï–°–ü–õ–ê–¢–ù–û üôè\n\n'
            f'üìù –Ø –º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–π —Å–ª—É–∂–∏—Ç–µ–ª—å —Ü–µ—Ä–∫–≤–∏ üôã‚Äç‚ôÄÔ∏è'
            )


def name_is_valid(name: str):
    return name.replace('-', '').isalpha() and len(name) <= 100


def render_keyboard(params: dict, standart=False):
    kboard = telebot.types.InlineKeyboardMarkup(row_width=6)
    for k, v in params.items():
        kboard.add(telebot.types.InlineKeyboardButton(text=v, callback_data=k))
    if standart:
        kboard.add(telebot.types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã', callback_data='contact'))
    return kboard


def returntomainmenu_keyboard(show_website=False):
    kboard = telebot.types.InlineKeyboardMarkup()
    if show_website:
        kboard.add(telebot.types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url=get_env_value("website")))
    kboard.add(telebot.types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏', callback_data='menu'))
    return kboard


def _get_detail_exception_info(exception_object: Exception):
    """
    Returns the short occurred exception description.
    :param exception_object:
    :return:
    """
    type, value, traceback = sys.exc_info()
    if traceback:
        # import traceback as tb
        # tb.print_tb(traceback, file=sys.stdout)

        return '{message} ({code} in {file}: {line})'.format(
            message=str(exception_object),
            code=exception_object.__class__.__name__,
            file=os.path.split(sys.exc_info()[2].tb_frame.f_code.co_filename)[1],
            line=sys.exc_info()[2].tb_lineno,
        )
    else:
        return f'{str(exception_object)} ({exception_object.__class__.__name__})'